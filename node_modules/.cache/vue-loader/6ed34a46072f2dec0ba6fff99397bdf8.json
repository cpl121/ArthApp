{"remainingRequest":"/Users/cesitarpl/Desktop/Informática/Proyectos/Blockchain/Juegos/8-arthapp-ssc/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cesitarpl/Desktop/Informática/Proyectos/Blockchain/Juegos/8-arthapp-ssc/src/components/Home.vue?vue&type=style&index=0&id=8dc7cce2&scoped=true&lang=css&","dependencies":[{"path":"/Users/cesitarpl/Desktop/Informática/Proyectos/Blockchain/Juegos/8-arthapp-ssc/src/components/Home.vue","mtime":1645012418765},{"path":"/Users/cesitarpl/Desktop/Informática/Proyectos/Blockchain/Juegos/8-arthapp-ssc/node_modules/css-loader/dist/cjs.js","mtime":1645011975685},{"path":"/Users/cesitarpl/Desktop/Informática/Proyectos/Blockchain/Juegos/8-arthapp-ssc/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645011976528},{"path":"/Users/cesitarpl/Desktop/Informática/Proyectos/Blockchain/Juegos/8-arthapp-ssc/node_modules/postcss-loader/src/index.js","mtime":1645011975955},{"path":"/Users/cesitarpl/Desktop/Informática/Proyectos/Blockchain/Juegos/8-arthapp-ssc/node_modules/cache-loader/dist/cjs.js","mtime":1645011975193},{"path":"/Users/cesitarpl/Desktop/Informática/Proyectos/Blockchain/Juegos/8-arthapp-ssc/node_modules/vue-loader/lib/index.js","mtime":1645011976230}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJ1dHRvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzY4YjFjMDsKICBjb2xvcjogYXp1cmU7Cn0K"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>ARTH-APP</h1>\n    <br />\n    <b-container fluid=\"sm\">\n      <b-row class=\"justify-content-md-center\">\n        <b-col col lg=\"1\">\n          <b-icon-heart-fill style=\"color: #A2231D;\" v-if=\"life >= 1\" scale=\"2\"></b-icon-heart-fill>\n          <b-icon-heart rotate=\"15\" scale=\"2\" v-else></b-icon-heart>\n        </b-col>\n        <b-col col lg=\"1\">\n          <b-icon-heart-fill style=\"color: #A2231D;\" v-if=\"life >= 2\" scale=\"2\"></b-icon-heart-fill>\n          <b-icon-heart rotate=\"15\" scale=\"2\" v-else></b-icon-heart>\n        </b-col>\n        <b-col col lg=\"1\">\n          <b-icon-heart-fill style=\"color: #A2231D;\" v-if=\"life >= 3\" scale=\"2\"></b-icon-heart-fill>\n          <b-icon-heart rotate=\"15\" scale=\"2\" v-else></b-icon-heart>\n        </b-col>\n      </b-row>\n    </b-container>\n    <br />\n    <br />\n    <row>\n      <b-button variant=\"outline-primary\" disabled>{{ time }}</b-button>\n      <b-button variant=\"outline-danger\" disabled>{{ timerCount }}</b-button>\n      <b-button variant=\"outline-success\" disabled>{{ counter }}</b-button>\n    </row>\n    <br />\n    <br />\n    <p style=\"font-size: 30px\">{{ randomNumber1 }} + {{ randomNumber2 }}</p>\n    <b-container fluid=\"sm\">\n      <b-row class=\"justify-content-md-center\">\n        <b-col col lg=\"1\">\n          <b-button\n            class=\"button\"\n            size=\"lg\"\n            variant=\"outline-dark\"\n            @click=\"button1()\"\n            >{{ arrayAnswer[0] }}</b-button\n          >\n        </b-col>\n        <b-col col lg=\"1\">\n          <b-button\n            class=\"button\"\n            size=\"lg\"\n            variant=\"outline-dark\"\n            @click=\"button2()\"\n            >{{ arrayAnswer[1] }}</b-button\n          >\n        </b-col>\n        <b-col col lg=\"1\">\n          <b-button\n            class=\"button\"\n            size=\"lg\"\n            variant=\"outline-dark\"\n            @click=\"button3()\"\n            >{{ arrayAnswer[2] }}</b-button\n          >\n        </b-col>\n      </b-row>\n    </b-container>\n    <b-modal v-model=\"gameOver\" title=\"Fin del juego\" @ok=\"newGame()\">\n      <!-- @show=\"$router.push('/')\"\n      @cancel=\"$router.push('/')\"\n      @hidden=\"$router.push('/')\" -->\n      <p>Se termino la partida</p>\n      <br />\n      PUNTUACIÓN FINAL: {{ counter }} TIEMPO FINAL: {{ time }}\n    </b-modal>\n    <br />\n    <h3>{{ correct }}</h3>\n    <br />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      life: 3,\n      randomNumber1: 1,\n      randomNumber2: 1,\n      check: false,\n      show: 0,\n      operator: \"\",\n      question: \"\",\n      answer: 0,\n      min: 1,\n      max: 99,\n      counter: 0,\n      correct: 0,\n      arrayAnswer: [],\n      gameOver: false,\n      timerCount: 10,\n      time: 0,\n    };\n  },\n  created: function () {\n    this.getRandomNumber();\n    this.countDownTimer();\n    this.countUpTimer();\n  },\n  watch: {},\n  methods: {\n    newGame() {\n      this.life = this.life = 3;\n      this.counter = 0;\n      this.time = 0;\n      this.timerCount = 10;\n      this.correct = 0;\n      this.gameOver = false;\n      this.countUpTimer();\n    },\n    nextOperation: function (answer) {\n      if (answer == this.answer) {\n        // Respuesta correcta\n        this.correct = this.correct + 1;\n        this.counter = this.counter + this.timerCount;\n        this.check = true;\n        this.show = 2;\n      } else {\n        // Respuesta incorrecta\n        this.check = false;\n        this.show = 2;\n        this.life = this.life - 1;\n        if (this.life == 0) {\n          // Fin de la partida\n          this.gameOver = true;\n        }\n      }\n      this.arrayAnswer = [];\n      this.getRandomNumber();\n    },\n    getRandomNumber: function () {\n      this.randomNumber1 = this.generateNumber(this.min, this.max);\n      this.randomNumber2 = this.generateNumber(this.min, this.max);\n      if (this.randomNumber1 >= this.randomNumber2) {\n        this.question = this.randomNumber1 + \" + \" + this.randomNumber2;\n        this.answer = this.randomNumber1 + this.randomNumber2;\n      } else {\n        this.question = this.randomNumber2 + \" + \" + this.randomNumber1;\n        this.answer = this.randomNumber2 + this.randomNumber1;\n      }\n\n      this.arrayAnswer = this.checkEqualNumber(this.answer);\n    },\n    checkEqualNumber(answer) {\n      let arrayFinal = [];\n      let newNumber = this.generateNumber(this.answer - 3, this.answer + 3);\n      while (newNumber == answer) {\n        newNumber = this.generateNumber(this.answer - 4, this.answer + 4);\n      }\n      let newNumber2 = this.generateNumber(this.answer - 3, this.answer + 3);\n      while (newNumber2 == answer || newNumber2 == newNumber) {\n        newNumber2 = this.generateNumber(this.answer - 3, this.answer + 3);\n      }\n      arrayFinal.push(answer, newNumber, newNumber2);\n      this.shuffleArray(arrayFinal);\n      return arrayFinal;\n    },\n    generateNumber: function (min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    },\n    shuffleArray(arrayAnswer) {\n      arrayAnswer.sort(() => Math.random() - 0.5);\n    },\n    button1() {\n      this.nextOperation(this.arrayAnswer[0]);\n      this.timerCount = 10;\n    },\n    button2() {\n      this.nextOperation(this.arrayAnswer[1]);\n      this.timerCount = 10;\n    },\n    button3() {\n      this.nextOperation(this.arrayAnswer[2]);\n      this.timerCount = 10;\n    },\n    countDownTimer() {\n      if (this.timerCount > 0) {\n        setTimeout(() => {\n          this.timerCount -= 1;\n          this.countDownTimer();\n        }, 1000);\n      } else {\n        this.life = this.life - 1;\n        this.timerCount = 10;\n      }\n    },\n    countUpTimer() {\n      if (!this.gameOver) {\n        setTimeout(() => {\n          this.time += 10;\n          this.countUpTimer();\n        }, 100);\n      }\n    },\n  },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.button {\n  background-color: #68b1c0;\n  color: azure;\n}\n</style>\n"]}]}